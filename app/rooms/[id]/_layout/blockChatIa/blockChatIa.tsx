import { Button, Textarea } from "@heroui/react";
import { SendHorizonal } from "lucide-react";
import Image from "next/image";
import React, { useEffect, useRef, useState } from "react";

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

const BlockChatIa = ({ id }: { id: string }) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [hasStartedConversation, setHasStartedConversation] = useState(false);
  const [inputValue, setInputValue] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // RÃ©ponses prÃ©dÃ©finies de Julia - Plus humaines et variÃ©es
  const juliaResponses: { [key: string]: string[] } = {
    salut: [
      "Salut ! ðŸ˜Š Comment puis-je vous aider aujourd'hui ?",
      "Hey ! Ravi de vous revoir ! Que puis-je faire pour vous ?",
      "Salut ! J'espÃ¨re que vous passez une belle journÃ©e. Comment puis-je vous assister ?",
      "Bonjour ! Toujours lÃ  pour vous aider. Que souhaitez-vous faire ?",
    ],
    bonjour: [
      "Bonjour ! Une belle journÃ©e qui commence ! Comment puis-je vous aider ?",
      "Bonjour ! J'espÃ¨re que vous avez bien dormi. Que puis-je faire pour vous ?",
      "Salut ! PrÃªt(e) pour une nouvelle journÃ©e ? Je suis lÃ  pour vous !",
      "Bonjour ! Toujours disponible pour vous accompagner. Que souhaitez-vous ?",
    ],
    "comment tu vas": [
      "Je vais trÃ¨s bien, merci ! Et vous, comment allez-vous ? J'espÃ¨re que tout va bien de votre cÃ´tÃ© ! ðŸ˜Š",
      "Ã‡a va super ! Toujours motivÃ©e pour vous aider. Et vous, comment vous sentez-vous aujourd'hui ?",
      "TrÃ¨s bien, merci ! J'ai hÃ¢te de vous aider. Comment se passe votre journÃ©e ?",
      "Parfaitement ! Toujours prÃªte Ã  vous assister. Et vous, tout va bien ?",
    ],
    "Ã§a va": [
      "Ã‡a va trÃ¨s bien, merci ! Toujours lÃ  pour vous. Comment puis-je vous Ãªtre utile aujourd'hui ?",
      "Super bien ! J'adore pouvoir vous aider. Que souhaitez-vous faire ?",
      "Ã‡a va parfaitement ! Toujours disponible pour vous. Comment puis-je vous assister ?",
      "TrÃ¨s bien, merci ! PrÃªte Ã  vous accompagner. Que puis-je faire pour vous ?",
    ],
    aide: [
      "Bien sÃ»r ! Je peux vous aider avec plein de choses :\nâ€¢ Des questions sur nos services\nâ€¢ Des informations sur votre compte\nâ€¢ Des conseils personnalisÃ©s\nâ€¢ Des astuces et bonnes pratiques\nQue souhaitez-vous savoir ? ðŸ˜Š",
      "Avec plaisir ! Je suis lÃ  pour vous accompagner dans :\nâ€¢ La dÃ©couverte de nos services\nâ€¢ La gestion de votre compte\nâ€¢ Des conseils sur mesure\nâ€¢ Des solutions adaptÃ©es\nPar quoi voulez-vous commencer ?",
      "Ã‰videmment ! Je peux vous guider pour :\nâ€¢ Comprendre nos fonctionnalitÃ©s\nâ€¢ Optimiser votre expÃ©rience\nâ€¢ RÃ©soudre vos questions\nâ€¢ Vous donner des conseils\nQue vous intÃ©resse le plus ?",
    ],
    merci: [
      "De rien ! C'est un plaisir de vous aider. N'hÃ©sitez pas si vous avez d'autres questions ! ðŸ˜Š",
      "Avec plaisir ! Je suis toujours lÃ  si vous avez besoin d'autre chose.",
      "Pas de souci ! Ravi(e) d'avoir pu vous aider. N'hÃ©sitez pas Ã  revenir !",
      "C'est normal ! Je suis lÃ  pour Ã§a. N'hÃ©sitez pas si vous avez d'autres questions !",
    ],
    "au revoir": [
      "Au revoir ! Passez une excellente journÃ©e ! N'hÃ©sitez pas Ã  revenir si vous avez besoin d'aide. ðŸ‘‹",
      "Bye ! Ã€ bientÃ´t ! Je serai toujours lÃ  pour vous quand vous reviendrez.",
      "Au revoir ! Prenez soin de vous ! N'hÃ©sitez pas si vous avez besoin d'aide plus tard.",
      "Ã€ bientÃ´t ! Passez une belle journÃ©e ! Je serai lÃ  pour vous accueillir quand vous reviendrez. ðŸ‘‹",
    ],
    bye: [
      "Bye ! Ã€ trÃ¨s vite ! N'hÃ©sitez pas Ã  revenir si vous avez besoin d'aide. ðŸ‘‹",
      "Au revoir ! Passez une excellente journÃ©e ! Je serai lÃ  pour vous.",
      "Bye ! Prenez soin de vous ! N'hÃ©sitez pas si vous avez des questions plus tard.",
      "Ã€ bientÃ´t ! Passez une belle journÃ©e ! Je serai toujours lÃ  pour vous aider. ðŸ‘‹",
    ],
    bien: [
      "Super ! Je suis contente que Ã§a aille bien. Comment puis-je vous aider aujourd'hui ? ðŸ˜Š",
      "Parfait ! Une belle journÃ©e qui s'annonce. Que puis-je faire pour vous ?",
      "Excellent ! Ã‡a fait plaisir Ã  entendre. Comment puis-je vous assister ?",
      "GÃ©nial ! Je suis ravie pour vous. Que souhaitez-vous faire ?",
    ],
    mal: [
      "Oh non, je suis dÃ©solÃ©e d'entendre Ã§a. Est-ce que je peux faire quelque chose pour vous aider ? ðŸ˜”",
      "Je suis navrÃ©e que Ã§a n'aille pas bien. Comment puis-je vous soutenir ?",
      "Courage ! Je suis lÃ  pour vous aider. Que puis-je faire pour vous ?",
      "Je comprends, c'est pas toujours facile. Comment puis-je vous assister ?",
    ],
    fatiguÃ©: [
      "Je comprends, la fatigue peut Ãªtre difficile. Prenez du temps pour vous reposer. Comment puis-je vous aider ? ðŸ˜´",
      "La fatigue, c'est normal parfois. N'hÃ©sitez pas Ã  faire des pauses. Que puis-je faire pour vous ?",
      "Je vois que vous Ãªtes fatiguÃ©(e). Prenez soin de vous ! Comment puis-je vous assister ?",
      "Courage ! La fatigue passe. En attendant, comment puis-je vous aider ?",
    ],
    stressÃ©: [
      "Le stress peut Ãªtre difficile Ã  gÃ©rer. Respirez profondÃ©ment, Ã§a va aller. Comment puis-je vous aider ? ðŸ˜Œ",
      "Je comprends le stress. N'hÃ©sitez pas Ã  prendre des pauses. Que puis-je faire pour vous ?",
      "Le stress, c'est normal dans la vie. Prenez du temps pour vous. Comment puis-je vous assister ?",
      "Courage ! Le stress finit toujours par passer. Comment puis-je vous aider ?",
    ],
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const getJuliaResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase();

    // Recherche de mots-clÃ©s dans le message
    for (const [keyword, responses] of Object.entries(juliaResponses)) {
      if (lowerMessage.includes(keyword)) {
        // SÃ©lectionner une rÃ©ponse alÃ©atoire du tableau
        const randomIndex = Math.floor(Math.random() * responses.length);
        return responses[randomIndex];
      }
    }

    // RÃ©ponses par dÃ©faut variÃ©es si aucun mot-clÃ© n'est trouvÃ©
    const defaultResponses = [
      "Je ne suis pas sÃ»re de comprendre. Pouvez-vous reformuler votre question ? ðŸ¤”",
      "Hmm, je n'ai pas bien saisi. Pourriez-vous Ãªtre plus spÃ©cifique ?",
      "Je ne comprends pas bien. Pouvez-vous me poser votre question diffÃ©remment ?",
      "DÃ©solÃ©e, je n'ai pas compris. Pourriez-vous reformuler ?",
      "Je ne suis pas certaine de ce que vous voulez dire. Pouvez-vous prÃ©ciser ?",
    ];

    const randomDefaultIndex = Math.floor(
      Math.random() * defaultResponses.length
    );
    return defaultResponses[randomDefaultIndex];
  };

  const simulateTyping = (response: string) => {
    setIsTyping(true);
    setTimeout(() => {
      const newMessage: Message = {
        id: Date.now().toString(),
        text: response,
        isUser: false,
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, newMessage]);
      setIsTyping(false);
    }, 1000 + Math.random() * 1000); // DÃ©lai alÃ©atoire entre 1-2 secondes
  };

  const handleSendMessage = () => {
    if (!inputValue.trim()) return;

    // Marquer le dÃ©but de la conversation
    if (!hasStartedConversation) {
      setHasStartedConversation(true);
    }

    // Ajouter le message de l'utilisateur
    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      isUser: true,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputValue("");

    // Simuler la rÃ©ponse de Julia
    const response = getJuliaResponse(inputValue);
    simulateTyping(response);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString("fr-FR", {
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  return (
    <div className="flex flex-col h-screen bg-bgCard">
      <div className="header p-3 border-b border-colorBorder">
        <div className="flex justify-between items-center">
          <div className="flex items-center gap-2">
            <div className="content-img rounded-full overflow-hidden w-[44px] h-[44px]">
              <Image
                src={"/images/julia.jpeg"}
                alt="julia"
                width={0}
                height={0}
                className="w-full h-[100%!important] object-cover"
                layout="responsive"
              />
            </div>
            <Image
              src={"/images/logos/logoJulia.png"}
              alt="logo de julia"
              className="w-[44px!important] dark:hidden"
              width={0}
              height={0}
              layout="responsive"
            />
             <Image
              src={"/images/logos/logoJuliaWhite.png"}
              alt="logo de julia"
              className="w-[44px!important] hidden dark:block"
              width={0}
              height={0}
              layout="responsive"
            />
          </div>
        </div>
      </div>

      <div className="body p-3 flex-grow overflow-y-auto px-4">
        {!hasStartedConversation ? (
          // Message de bienvenue initial
          <div className="flex flex-col h-full justify-center items-center">
            <div className="w-full text-center">
              <h2 className="lg:text-[24px] font-semibold">Salut Martins ðŸ‘‹</h2>
              <p className="text-colorMuted text-sm">
                Je suis Julia, toujours prÃªte Ã  vous assister.
              </p>
            </div>
          </div>
        ) : (
          // Interface de chat
          <div className="flex flex-col space-y-3">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${
                  message.isUser ? "justify-end" : "justify-start"
                }`}
              >
                <div
                  className={`max-w-[80%] rounded-lg p-3 ${
                    message.isUser
                      ? "bg-primaryColor text-white rounded-br-none"
                      : "bg-bgGray text-colorTitle rounded-bl-none"
                  }`}
                >
                  <div className="whitespace-pre-wrap text-sm">
                    {message.text}
                  </div>
                  <div
                    className={`text-xs mt-1 ${
                      message.isUser ? "text-white/70" : "text-colorMuted"
                    }`}
                  >
                    {formatTime(message.timestamp)}
                  </div>
                </div>
              </div>
            ))}

            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-bgGray text-gray-800 rounded-lg p-3">
                  <div className="flex items-center space-x-1">
                    <div className="flex space-x-1">
                      <div className="w-1 h-1 bg-colorTitle rounded-full animate-bounce"></div>
                      <div
                        className="w-1 h-1 bg-colorTitle rounded-full animate-bounce"
                        style={{ animationDelay: "0.1s" }}
                      ></div>
                      <div
                        className="w-1 h-1 bg-colorTitle rounded-full animate-bounce"
                        style={{ animationDelay: "0.2s" }}
                      ></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      <div className="footer p-[18px] py-3">
        <Textarea
          placeholder="Demandez Ã  Julia"
          variant="bordered"
          minRows={1}
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          onKeyPress={handleKeyPress}
          classNames={{
            inputWrapper: "bg-bgGray border-colorBorder border-0 shadow-none ",
            input:
              "text-colorTitle placeholder:text-colorMuted placeholder:opacity-70",
          }}
          endContent={
            <Button
              className="w-[32px] h-[32px] bg-primaryColor min-w-0 p-0 flex-none text-white"
              onPress={handleSendMessage}
              isDisabled={!inputValue.trim() || isTyping}
            >
              <SendHorizonal size={16} />
            </Button>
          }
        />
      </div>
    </div>
  );
};

export default BlockChatIa;
